/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Multi-Tenant Shop API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Category,
  Client,
  Product
} from '../../model';

import { customFetch } from '.././custom-fetch';




/**
 * @summary List all clients
 */
export const getClients = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetch<Client[]>(
      {url: `/clients`, method: 'GET', signal
    },
      );
    }
  

export const getGetClientsQueryKey = () => {
    return [`/clients`] as const;
    }

    
export const getGetClientsQueryOptions = <TData = Awaited<ReturnType<typeof getClients>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClients>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClientsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClients>>> = ({ signal }) => getClients(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClients>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClientsQueryResult = NonNullable<Awaited<ReturnType<typeof getClients>>>
export type GetClientsQueryError = unknown


export function useGetClients<TData = Awaited<ReturnType<typeof getClients>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClients>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClients>>,
          TError,
          Awaited<ReturnType<typeof getClients>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClients<TData = Awaited<ReturnType<typeof getClients>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClients>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClients>>,
          TError,
          Awaited<ReturnType<typeof getClients>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClients<TData = Awaited<ReturnType<typeof getClients>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClients>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all clients
 */

export function useGetClients<TData = Awaited<ReturnType<typeof getClients>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClients>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClientsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new client
 */
export const postClients = (
    client: Client,
 signal?: AbortSignal
) => {
      
      
      return customFetch<Client>(
      {url: `/clients`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: client, signal
    },
      );
    }
  


export const getPostClientsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClients>>, TError,{data: Client}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postClients>>, TError,{data: Client}, TContext> => {
    
const mutationKey = ['postClients'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClients>>, {data: Client}> = (props) => {
          const {data} = props ?? {};

          return  postClients(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClientsMutationResult = NonNullable<Awaited<ReturnType<typeof postClients>>>
    export type PostClientsMutationBody = Client
    export type PostClientsMutationError = unknown

    /**
 * @summary Create a new client
 */
export const usePostClients = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClients>>, TError,{data: Client}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postClients>>,
        TError,
        {data: Client},
        TContext
      > => {

      const mutationOptions = getPostClientsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all categories for a client
 */
export const getClientsClientIdCategories = (
    clientId: string,
 signal?: AbortSignal
) => {
      
      
      return customFetch<Category[]>(
      {url: `/clients/${clientId}/categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetClientsClientIdCategoriesQueryKey = (clientId: string,) => {
    return [`/clients/${clientId}/categories`] as const;
    }

    
export const getGetClientsClientIdCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError = unknown>(clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClientsClientIdCategoriesQueryKey(clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClientsClientIdCategories>>> = ({ signal }) => getClientsClientIdCategories(clientId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(clientId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClientsClientIdCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getClientsClientIdCategories>>>
export type GetClientsClientIdCategoriesQueryError = unknown


export function useGetClientsClientIdCategories<TData = Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError = unknown>(
 clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientsClientIdCategories>>,
          TError,
          Awaited<ReturnType<typeof getClientsClientIdCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClientsClientIdCategories<TData = Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientsClientIdCategories>>,
          TError,
          Awaited<ReturnType<typeof getClientsClientIdCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClientsClientIdCategories<TData = Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all categories for a client
 */

export function useGetClientsClientIdCategories<TData = Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdCategories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClientsClientIdCategoriesQueryOptions(clientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create category for a client
 */
export const postClientsClientIdCategories = (
    clientId: string,
    category: Category,
 signal?: AbortSignal
) => {
      
      
      return customFetch<Category>(
      {url: `/clients/${clientId}/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: category, signal
    },
      );
    }
  


export const getPostClientsClientIdCategoriesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClientsClientIdCategories>>, TError,{clientId: string;data: Category}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postClientsClientIdCategories>>, TError,{clientId: string;data: Category}, TContext> => {
    
const mutationKey = ['postClientsClientIdCategories'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClientsClientIdCategories>>, {clientId: string;data: Category}> = (props) => {
          const {clientId,data} = props ?? {};

          return  postClientsClientIdCategories(clientId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClientsClientIdCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postClientsClientIdCategories>>>
    export type PostClientsClientIdCategoriesMutationBody = Category
    export type PostClientsClientIdCategoriesMutationError = unknown

    /**
 * @summary Create category for a client
 */
export const usePostClientsClientIdCategories = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClientsClientIdCategories>>, TError,{clientId: string;data: Category}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postClientsClientIdCategories>>,
        TError,
        {clientId: string;data: Category},
        TContext
      > => {

      const mutationOptions = getPostClientsClientIdCategoriesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all products for a client
 */
export const getClientsClientIdProducts = (
    clientId: string,
 signal?: AbortSignal
) => {
      
      
      return customFetch<Product[]>(
      {url: `/clients/${clientId}/products`, method: 'GET', signal
    },
      );
    }
  

export const getGetClientsClientIdProductsQueryKey = (clientId: string,) => {
    return [`/clients/${clientId}/products`] as const;
    }

    
export const getGetClientsClientIdProductsQueryOptions = <TData = Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError = unknown>(clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClientsClientIdProductsQueryKey(clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClientsClientIdProducts>>> = ({ signal }) => getClientsClientIdProducts(clientId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(clientId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClientsClientIdProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getClientsClientIdProducts>>>
export type GetClientsClientIdProductsQueryError = unknown


export function useGetClientsClientIdProducts<TData = Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError = unknown>(
 clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientsClientIdProducts>>,
          TError,
          Awaited<ReturnType<typeof getClientsClientIdProducts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClientsClientIdProducts<TData = Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientsClientIdProducts>>,
          TError,
          Awaited<ReturnType<typeof getClientsClientIdProducts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClientsClientIdProducts<TData = Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all products for a client
 */

export function useGetClientsClientIdProducts<TData = Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError = unknown>(
 clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClientsClientIdProducts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClientsClientIdProductsQueryOptions(clientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create product for a client
 */
export const postClientsClientIdProducts = (
    clientId: string,
    product: Product,
 signal?: AbortSignal
) => {
      
      
      return customFetch<Product>(
      {url: `/clients/${clientId}/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: product, signal
    },
      );
    }
  


export const getPostClientsClientIdProductsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClientsClientIdProducts>>, TError,{clientId: string;data: Product}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postClientsClientIdProducts>>, TError,{clientId: string;data: Product}, TContext> => {
    
const mutationKey = ['postClientsClientIdProducts'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postClientsClientIdProducts>>, {clientId: string;data: Product}> = (props) => {
          const {clientId,data} = props ?? {};

          return  postClientsClientIdProducts(clientId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostClientsClientIdProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postClientsClientIdProducts>>>
    export type PostClientsClientIdProductsMutationBody = Product
    export type PostClientsClientIdProductsMutationError = unknown

    /**
 * @summary Create product for a client
 */
export const usePostClientsClientIdProducts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postClientsClientIdProducts>>, TError,{clientId: string;data: Product}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postClientsClientIdProducts>>,
        TError,
        {clientId: string;data: Product},
        TContext
      > => {

      const mutationOptions = getPostClientsClientIdProductsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    